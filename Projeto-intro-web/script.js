// const nome = 
// const idade = 
// const regiao =
// const funcao = //boolean

// SEMANA 1- Pense em alguma coisa do cotidiano que seja cont√°vel e estruturada. Por enquanto, vamos chamar esta coisa de item.
// Com esse item, n√≥s vamos construir nossas l√≥gicas e evoluir no projeto atrav√©s das semanas. 
// Pode ser qualquer coisa que possa ser descrita com caracter√≠sticas escritas. 

// 3. Fa√ßa um c√°lculo de m√©dia, entre os valores num√©ricos respectivos de cada item. 
// Imprima o valor da m√©dia utilizando um console.log. Guarde este valor em uma const;
// üí°A m√©dia deve ser igual √† soma dos itens, dividida pelo total de itens.
// 4. Com um console.log, imprima o resultado de uma opera√ß√£o l√≥gica que checa se todos os 
// valores de vari√°veis booleanas criadas at√© aqui s√£o verdadeiras.


const nome1 = "sona"
const nomeMaiusculo1 = nome1.toUpperCase()
const idade1 = 21
const regiao1 = "demacia"
const funcao1 = "suporte"
const teveRework1 = false
const arraySkin = ["guardia estelar" , " Dj sona"]

// console.log(` Nome: ${nomeMaiusculo1} \n Idade: ${idade1} \n Regi√£o: ${regiao1} \n Funcao: ${funcao1} \n Rework: ${teveRework1} \n Melhor skin: ${arraySkin1}`)

// //\\//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\//


const nome2 = "senna"
const nomeMaiusculo2 = nome2.toUpperCase()
const idade2 = 25
const regiao2 = "runeterra"
const funcao2 = "atirador(a)"
const teveRework2 = false
const arraySkin2 = ["true damage", " velho oeste"]

// console.log(` Nome: ${nomeMaiusculo2} \n Idade: ${idade2} \n Regi√£o: ${regiao2} \n Funcao: ${funcao2} \n Rework: ${teveRework2} \n Melhor skin: ${arraySkin2}`)

// //\\//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\//

const nome3 = "leBlanc"
const nomeMaiusculo3 = nome3.toUpperCase()
const idade3 = 28
const regiao3 = "noxus"
const funcao3 = "assassino(a)"
const teveRework3 = true
const arraySkin3 = ["congregacao das bruxas", " cibernetica"]

// console.log(` Nome: ${nomeMaiusculo3} \n Idade: ${idade3} \n Regi√£o: ${regiao3} \n Funcao: ${funcao3} \n Rework: ${teveRework3} \n Melhor skin: ${arraySkin3}`)

// //\\//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\//

// SEMANA 2- 1. Crie pelo menos mais uma caracter√≠stica para o item que voc√™ criou. 
// Esta caracter√≠stica deve ser um array. Mantenha o tipo de dado do array criado sempre o mesmo,
// isto √©, se √© um array de strings, s√≥ deve receber strings.

// Exiba um relat√≥rio utilizando console.log(), mostrando todos os dados de cada um dos itens criados at√© aqui
//  1. O log deve exibir o dado de nome, t√≠tulo ou afim sempre em LETRAS MAI√öSCULAS,

const verficarRework = (teveRework1 && teveRework2 && teveRework3);
// console.log(verficarRework)

const media = (idade1 + idade2 + idade3)
// console.log(media)



//\\//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\//
// SEMANA 3- Transforme os itens que criamos nas √∫ltimas semanas em objetos.
// Crie um array para guardar os objetos. Este array deve estar vazio, por enquanto;
// Adicione os objetos criados no item 1 ao array de objetos criado no item 2, utilizando o push()
// Ao fim.


const personagens = [
    {
        nome: "Sona",
        idade: 21,
        regiao: "demacia",
        funcao: "suporte",
        teveRework: false,
        arraySkin: ["guardia estelar", "Dj sona"]
    },

    {
        nome: "Senna",
        idade: 25,
        regiao: "runeterra",
        funcao: "atirador(a)",
        teveRework: false,
        arraySkin: ["true damage", " velho oeste"]
    },

    {
        nome: "LeBlanc",
        idade: 28,
        regiao: "noxus",
        funcao: "assassino(a)",
        teveRework: true,
        arraySkin: ["congregacao das bruxas", "cibernetica"]
    }
    
]
// SEMANA 4- 
// 1. Altere o item ‚ÄúAdicione os novos objetos no array de objetos, 
// utilizando o push()‚Äù (item 3 da semana 3), para criar uma verifica√ß√£o antes de dar o push. 
// A carater√≠stica booleana do objeto deve ser validada. Isto √©, o objeto s√≥ deve ser adicionado ao array 
// se a propriedade booleana for true;

// 2. Crie uma condi√ß√£o else, que, em caso de valor false na condi√ß√£o acima, exiba um **ALERT** avisando para o usu√°rio 
// que o item n√£o foi adicionado, e n√£o fa√ßa o push


const arrayPersonagens = []

// (IF PURO - feito um condi√ß√£o, isso foi na for√ßa do odio sem o la√ßo)

// if(personagens[0].teveRework === true){
//     arrayPersonagens.push(personagens[0])
// }

// if(personagens[1].teveRework === true) {
//     arrayPersonagens.push(personagens[1])
// }

// if(personagens[2].teveRework === true) {
//     arrayPersonagens.push(personagens[2])
// }
//  console.log(arrayPersonagens);

// (Esse aqui foi feito de uma forma mais estruturada usando o la√ßo)

for (let i = 0; i < personagens.length; i++) {
    if (personagens[i].teveRework === true) {
        arrayPersonagens.push(personagens[i])
    } else {
        alert(`${personagens[i].nome} n√£o foi adicionado`)
    }
}
console.log(arrayPersonagens);



// if (true) {
//     if (teveRework1 === false) {
//         arraySkin1.push()
//     } else {
//         console.log(`${teveRework1} campe√£o encontrado`)
//     } if (teveRework2 === false) {
//         arraySkin2.push()
//     } else {
//         console.log(`${teveRework3} campe√£o encontrado`)
//     } if (teveRework3 === true) {
        
//     }else{
//         console.log( alert`${teveRework3} campe√£o n√£o foi encontrado`);
//     }
// }
// console.log(personagens, arrayPersonagens)



//\\//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\//

//SEMANA 5- Reescrevendo o relat√≥rio da semana 2, altere a forma que a caracter√≠stica de array, criada no item 1 da semana 2, 
// fa√ßa um la√ßo que guarde todos os valores da propriedade array do objeto em uma mesma string. Utilize esta string no relat√≥rio.

// Ainda no relat√≥rio, altere-o para que ele seja criado utilizando um la√ßo.
// Ou seja, voc√™ n√£o deve mais imprimir individualmente cada item do relat√≥rio. 
// Cada item deve ser exibido a partir de uma itera√ß√£o do la√ßo. Para testar, adicione mais um item ao array de objetos, 
// e verifique se ele √© exibido corretamente.

let arraysDosOjetos1 = []

// for (let i = 0; i < arraySkin1.length; i++) {
//     arraysDosOjetos1 = arraysDosOjetos1 + ',' + arraySkin1[i]
// }
// console.log(arraysDosOjetos1)


// let arraysDosOjetos2 = ""

// for (let i = 0; i < arraySkin2.length; i++) {
//     arraysDosOjetos2 = arraysDosOjetos2 + ',' + arraySkin2[i]
// }
// console.log(arraysDosOjetos2)


// let arraysDosOjetos3 = ""

// for (let i = 0; i < arraySkin3.length; i++) {
//     arraysDosOjetos3 = arraysDosOjetos3 + ',' + arraySkin3[i]
// }
// console.log(arraysDosOjetos3)

for (let i = 0; i < arraySkin.length; i++) {
    arraySkin[i].personagens
}
console.log(arraysDosOjetos1)






// SEMANA 6- 
// 1. Crie uma fun√ß√£o que receba como par√¢metro um objeto, e devolva a string do relat√≥rio com os dados do objeto.

function personagensRelatorio(objeto) {
    console.log(`Nome: ${objeto.nome.toUpperCase()} \n idade: ${objeto.idade1} \n ${objeto.regiao1} \n ${objeto.funcao1} \n ${objeto.teveRework1} \n ${objeto.teveRework1} \n ${objeto.teveRework1}`)
}



// 2. Crie uma fun√ß√£o que recebe um array de objetos e uma string. Esta fun√ß√£o deve retornar um objeto,
//  e o objeto retornado deve possuir apenas os itens que tenham o nome/t√≠tulo igual √† string passada como par√¢metro. 
//  Caso n√£o exista um item, exiba um ALERT indicando que nenhum item foi encontrado.











//SEMANA 7- 
// 1. Crie uma p√°gina HTML, e nesta p√°gina, d√™ um t√≠tulo para sua lista de itens;
// 2. Crie um cabe√ßalho, uma se√ß√£o principal, e um footer para a p√°gina;
// 3. Na se√ß√£o principal. Crie duas divis√µes. Uma deve possuir um input e um bot√£o. A outra, deve possuir sections para criar os itens da lista;
// 1. Crie uma section para cada item da lista;
// 2. Para cada um dos tr√™s itens criados deve possuir todas as informa√ß√µes do array de objetos. As informa√ß√µes devem estar elencadas como lista n√£o ordenada. Esta tela n√£o precisa interagir com o JavaScript, tendo seus dados escritos diretamente nos elementos.
// 3. Transforme o nome/t√≠tulo do item em um link para um artigo sobre este item (pode ser do google, de algum blog ou da Wikip√©dia)
// üí° Recomendamos adicionar imagens a seus itens agora. Ao fazer isso, lembre-se de criar mais uma propriedade String nos seus objetos, para guardar o caminho do link at√© a imagem.




















































